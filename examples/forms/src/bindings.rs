// Generated by `wit-bindgen` 0.18.0. DO NOT EDIT!
pub mod demo {
  pub mod forms {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Details required in order to add an event listener to an element
      #[derive(Clone)]
      pub struct ListenDetails {
        pub selector: wit_bindgen::rt::string::String,
        pub ty: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for ListenDetails {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
        }
      }
      /// Context for the minijinja rendering
      #[derive(Clone)]
      pub struct Page {
        pub title: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Page {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Page").field("title", &self.title).finish()
        }
      }
      #[derive(Clone)]
      pub struct Input {
        pub placeholder: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Input {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Input").field("placeholder", &self.placeholder).finish()
        }
      }
      #[derive(Clone)]
      pub struct Output {
        /// the resulting value of the total outputs combined
        pub value: Option<wit_bindgen::rt::string::String>,
        /// optional id string: None is intial render, Some for update value
        pub id: Option<wit_bindgen::rt::string::String>,
        /// the output dest for the username changes
        pub username: Option<wit_bindgen::rt::string::String>,
        /// the output dest for the password changes
        pub password: Option<wit_bindgen::rt::string::String>,
      }
      impl ::core::fmt::Debug for Output {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Output").field("value", &self.value).field("id", &self.id).field("username", &self.username).field("password", &self.password).finish()
        }
      }
      /// COntent for the entire page
      #[derive(Clone)]
      pub struct Content {
        pub page: Page,
        pub input: Input,
        pub output: Option<Output>,
      }
      impl ::core::fmt::Debug for Content {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Content").field("page", &self.page).field("input", &self.input).field("output", &self.output).finish()
        }
      }
      /// Context variants
      #[derive(Clone)]
      pub enum Context{
        AllContent(Content),
        Username(wit_bindgen::rt::string::String),
        Password(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Username(e) => {
              f.debug_tuple("Context::Username").field(e).finish()
            }
            Context::Password(e) => {
              f.debug_tuple("Context::Password").field(e).finish()
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_in {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type ListenDetails = super::super::super::demo::forms::types::ListenDetails;
      #[allow(unused_unsafe, clippy::all)]
      /// Add an event listener to the given element
      pub fn addeventlistener(details: &ListenDetails,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let super::super::super::demo::forms::types::ListenDetails{ selector:selector0, ty:ty0, } = details;
          let vec1 = selector0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = ty0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "demo:forms/wurbo-in")]
          extern "C" {
            #[link_name = "addeventlistener"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2);
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod demo {
    pub mod forms {
      
      #[allow(clippy::all)]
      pub mod wurbo_out {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Context = super::super::super::super::demo::forms::types::Context;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "demo:forms/wurbo-out#customize"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_customize(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let base6 = arg0;
            let len6 = arg1;
            let mut result6 = Vec::with_capacity(len6 as usize);
            for i in 0..len6 {
              let base = base6 + i * 16;
              let e6 = {
                let l0 = *((base + 0) as *const i32);
                let l1 = *((base + 4) as *const i32);
                let len2 = l1 as usize;
                let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                let l3 = *((base + 8) as *const i32);
                let l4 = *((base + 12) as *const i32);
                let len5 = l4 as usize;
                let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                
                (wit_bindgen::rt::string_lift(bytes2), wit_bindgen::rt::string_lift(bytes5))
              };
              result6.push(e6);
            }
            wit_bindgen::rt::dealloc(base6, (len6 as usize) * 16, 4);
            let result7 = <_GuestImpl as Guest>::customize(result6);
            let ptr8 = _RET_AREA.0.as_mut_ptr() as i32;
            match result7 {
              Ok(_) => { {
                *((ptr8 + 0) as *mut u8) = (0i32) as u8;
              } },
              Err(e) => { {
                *((ptr8 + 0) as *mut u8) = (1i32) as u8;
                let vec9 = (e.into_bytes()).into_boxed_slice();
                let ptr9 = vec9.as_ptr() as i32;
                let len9 = vec9.len() as i32;
                ::core::mem::forget(vec9);
                *((ptr8 + 8) as *mut i32) = len9;
                *((ptr8 + 4) as *mut i32) = ptr9;
              } },
            };ptr8
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_demo:forms/wurbo-out#customize"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_customize(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => (),
                _ => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "demo:forms/wurbo-out#render"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_render(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let l0 = i32::from(*((arg0 + 0) as *const u8));
            use super::super::super::super::demo::forms::types::Context as V30;
            let v30 = match l0 {
              0 => {
                let e30 = {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  let len3 = l2 as usize;
                  let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
                  let l4 = *((arg0 + 12) as *const i32);
                  let l5 = *((arg0 + 16) as *const i32);
                  let len6 = l5 as usize;
                  let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                  let l7 = i32::from(*((arg0 + 20) as *const u8));
                  
                  super::super::super::super::demo::forms::types::Content{
                    page: super::super::super::super::demo::forms::types::Page{
                      title: wit_bindgen::rt::string_lift(bytes3),
                    },
                    input: super::super::super::super::demo::forms::types::Input{
                      placeholder: wit_bindgen::rt::string_lift(bytes6),
                    },
                    output: match l7 {
                      0 => None,
                      1 => {
                        let e = {
                          let l8 = i32::from(*((arg0 + 24) as *const u8));
                          let l12 = i32::from(*((arg0 + 36) as *const u8));
                          let l16 = i32::from(*((arg0 + 48) as *const u8));
                          let l20 = i32::from(*((arg0 + 60) as *const u8));
                          
                          super::super::super::super::demo::forms::types::Output{
                            value: match l8 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l9 = *((arg0 + 28) as *const i32);
                                  let l10 = *((arg0 + 32) as *const i32);
                                  let len11 = l10 as usize;
                                  let bytes11 = Vec::from_raw_parts(l9 as *mut _, len11, len11);
                                  
                                  wit_bindgen::rt::string_lift(bytes11)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            id: match l12 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l13 = *((arg0 + 40) as *const i32);
                                  let l14 = *((arg0 + 44) as *const i32);
                                  let len15 = l14 as usize;
                                  let bytes15 = Vec::from_raw_parts(l13 as *mut _, len15, len15);
                                  
                                  wit_bindgen::rt::string_lift(bytes15)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            username: match l16 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l17 = *((arg0 + 52) as *const i32);
                                  let l18 = *((arg0 + 56) as *const i32);
                                  let len19 = l18 as usize;
                                  let bytes19 = Vec::from_raw_parts(l17 as *mut _, len19, len19);
                                  
                                  wit_bindgen::rt::string_lift(bytes19)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            password: match l20 {
                              0 => None,
                              1 => {
                                let e = {
                                  let l21 = *((arg0 + 64) as *const i32);
                                  let l22 = *((arg0 + 68) as *const i32);
                                  let len23 = l22 as usize;
                                  let bytes23 = Vec::from_raw_parts(l21 as *mut _, len23, len23);
                                  
                                  wit_bindgen::rt::string_lift(bytes23)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                          }
                        };
                        Some(e)
                      }
                      _ => wit_bindgen::rt::invalid_enum_discriminant(),
                    },
                  }
                };
                V30::AllContent(e30)
              }
              1 => {
                let e30 = {
                  let l24 = *((arg0 + 4) as *const i32);
                  let l25 = *((arg0 + 8) as *const i32);
                  let len26 = l25 as usize;
                  let bytes26 = Vec::from_raw_parts(l24 as *mut _, len26, len26);
                  
                  wit_bindgen::rt::string_lift(bytes26)
                };
                V30::Username(e30)
              }
              n => {
                debug_assert_eq!(n, 2, "invalid enum discriminant");
                let e30 = {
                  let l27 = *((arg0 + 4) as *const i32);
                  let l28 = *((arg0 + 8) as *const i32);
                  let len29 = l28 as usize;
                  let bytes29 = Vec::from_raw_parts(l27 as *mut _, len29, len29);
                  
                  wit_bindgen::rt::string_lift(bytes29)
                };
                V30::Password(e30)
              }
            };
            let result31 = <_GuestImpl as Guest>::render(v30);
            wit_bindgen::rt::dealloc(arg0, 72, 4);
            let ptr32 = _RET_AREA.0.as_mut_ptr() as i32;
            match result31 {
              Ok(e) => { {
                *((ptr32 + 0) as *mut u8) = (0i32) as u8;
                let vec33 = (e.into_bytes()).into_boxed_slice();
                let ptr33 = vec33.as_ptr() as i32;
                let len33 = vec33.len() as i32;
                ::core::mem::forget(vec33);
                *((ptr32 + 8) as *mut i32) = len33;
                *((ptr32 + 4) as *mut i32) = ptr33;
              } },
              Err(e) => { {
                *((ptr32 + 0) as *mut u8) = (1i32) as u8;
                let vec34 = (e.into_bytes()).into_boxed_slice();
                let ptr34 = vec34.as_ptr() as i32;
                let len34 = vec34.len() as i32;
                ::core::mem::forget(vec34);
                *((ptr32 + 8) as *mut i32) = len34;
                *((ptr32 + 4) as *mut i32) = ptr34;
              } },
            };ptr32
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_demo:forms/wurbo-out#render"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_render(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "demo:forms/wurbo-out#activate"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_activate(arg0: i32,arg1: i32,arg2: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::activate(match arg0 {
              0 => None,
              1 => {
                let e = {
                  let base3 = arg1;
                  let len3 = arg2;
                  let mut result3 = Vec::with_capacity(len3 as usize);
                  for i in 0..len3 {
                    let base = base3 + i * 8;
                    let e3 = {
                      let l0 = *((base + 0) as *const i32);
                      let l1 = *((base + 4) as *const i32);
                      let len2 = l1 as usize;
                      let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                      
                      wit_bindgen::rt::string_lift(bytes2)
                    };
                    result3.push(e3);
                  }
                  wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
                  
                  result3
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            });
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          /// Optionally customize the configuration of the templates used to render the component
          fn customize(templates: wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,wit_bindgen::rt::string::String,)>,) -> Result<(),wit_bindgen::rt::string::String>;
          /// renders the initial Web component with the given data
          /// and the target template to use as top level entry point
          fn render(ctx: Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
          /// activate listening
          fn activate(selectors: Option<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>>,);
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:main"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 669] = [0, 97, 115, 109, 13, 0, 1, 0, 0, 25, 22, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 4, 0, 7, 163, 4, 1, 65, 2, 1, 65, 8, 1, 66, 14, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 4, 1, 107, 115, 1, 114, 4, 5, 118, 97, 108, 117, 101, 6, 2, 105, 100, 6, 8, 117, 115, 101, 114, 110, 97, 109, 101, 6, 8, 112, 97, 115, 115, 119, 111, 114, 100, 6, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 7, 1, 107, 8, 1, 114, 3, 4, 112, 97, 103, 101, 3, 5, 105, 110, 112, 117, 116, 5, 6, 111, 117, 116, 112, 117, 116, 9, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 10, 1, 113, 3, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 11, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 12, 3, 1, 16, 100, 101, 109, 111, 58, 102, 111, 114, 109, 115, 47, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 4, 2, 3, 2, 1, 1, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 3, 1, 19, 100, 101, 109, 111, 58, 102, 111, 114, 109, 115, 47, 119, 117, 114, 98, 111, 45, 105, 110, 5, 2, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 14, 2, 3, 2, 1, 3, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 111, 2, 115, 115, 1, 112, 2, 1, 106, 0, 1, 115, 1, 64, 1, 9, 116, 101, 109, 112, 108, 97, 116, 101, 115, 3, 0, 4, 4, 0, 9, 99, 117, 115, 116, 111, 109, 105, 122, 101, 1, 5, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 6, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 7, 1, 112, 115, 1, 107, 8, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 9, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 10, 4, 1, 20, 100, 101, 109, 111, 58, 102, 111, 114, 109, 115, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 5, 4, 4, 1, 15, 100, 101, 109, 111, 58, 102, 111, 114, 109, 115, 47, 109, 97, 105, 110, 4, 0, 11, 10, 1, 0, 4, 109, 97, 105, 110, 3, 0, 0, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 50, 49, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 56, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
