// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod demo {
  pub mod vowels {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Details required in order to add an event listener to an element
      #[derive(Clone)]
      pub struct ListenDetails {
        pub selector: wit_bindgen::rt::string::String,
        pub ty: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for ListenDetails {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
        }
      }
      /// Context for the minijinja rendering
      #[derive(Clone)]
      pub struct Page {
        pub title: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Page {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Page").field("title", &self.title).finish()
        }
      }
      #[derive(Clone)]
      pub struct Input {
        pub placeholder: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Input {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Input").field("placeholder", &self.placeholder).finish()
        }
      }
      #[derive(Clone)]
      pub struct Outrecord {
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Outrecord {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Outrecord").field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub struct Output {
        pub value: wit_bindgen::rt::string::String,
        /// optional id string: None is intial render, Some for update value
        pub id: Option<wit_bindgen::rt::string::String>,
        pub template: Option<wit_bindgen::rt::string::String>,
      }
      impl ::core::fmt::Debug for Output {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Output").field("value", &self.value).field("id", &self.id).field("template", &self.template).finish()
        }
      }
      /// COntent for the entire page
      #[derive(Clone)]
      pub struct Content {
        pub page: Page,
        pub input: Input,
        pub output: Option<Output>,
      }
      impl ::core::fmt::Debug for Content {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Content").field("page", &self.page).field("input", &self.input).field("output", &self.output).finish()
        }
      }
      /// Context variants
      #[derive(Clone)]
      pub enum Context{
        AllContent(Content),
        Phrase(Outrecord),
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Phrase(e) => {
              f.debug_tuple("Context::Phrase").field(e).finish()
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_in {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type ListenDetails = super::super::super::demo::vowels::types::ListenDetails;
      #[allow(unused_unsafe, clippy::all)]
      /// Add an event listener to the given element
      pub fn addeventlistener(details: &ListenDetails,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let super::super::super::demo::vowels::types::ListenDetails{ selector:selector0, ty:ty0, } = details;
          let vec1 = selector0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = ty0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "demo:vowels/wurbo-in")]
          extern "C" {
            #[link_name = "addeventlistener"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2);
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod demo {
    pub mod vowels {
      
      #[allow(clippy::all)]
      pub mod wurbo_out {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Context = super::super::super::super::demo::vowels::types::Context;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "demo:vowels/wurbo-out#render"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_render(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,arg9: i32,arg10: i32,arg11: i32,arg12: i32,arg13: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            use super::super::super::super::demo::vowels::types::Context as V6;
            let v6 = match arg0 {
              0 => {
                let e6 = {
                  let len0 = arg2 as usize;
                  let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                  let len1 = arg4 as usize;
                  let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                  
                  super::super::super::super::demo::vowels::types::Content{
                    page: super::super::super::super::demo::vowels::types::Page{
                      title: wit_bindgen::rt::string_lift(bytes0),
                    },
                    input: super::super::super::super::demo::vowels::types::Input{
                      placeholder: wit_bindgen::rt::string_lift(bytes1),
                    },
                    output: match arg5 {
                      0 => None,
                      1 => {
                        let e = {
                          let len2 = arg7 as usize;
                          let bytes2 = Vec::from_raw_parts(arg6 as *mut _, len2, len2);
                          
                          super::super::super::super::demo::vowels::types::Output{
                            value: wit_bindgen::rt::string_lift(bytes2),
                            id: match arg8 {
                              0 => None,
                              1 => {
                                let e = {
                                  let len3 = arg10 as usize;
                                  let bytes3 = Vec::from_raw_parts(arg9 as *mut _, len3, len3);
                                  
                                  wit_bindgen::rt::string_lift(bytes3)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            template: match arg11 {
                              0 => None,
                              1 => {
                                let e = {
                                  let len4 = arg13 as usize;
                                  let bytes4 = Vec::from_raw_parts(arg12 as *mut _, len4, len4);
                                  
                                  wit_bindgen::rt::string_lift(bytes4)
                                };
                                Some(e)
                              }
                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                          }
                        };
                        Some(e)
                      }
                      _ => wit_bindgen::rt::invalid_enum_discriminant(),
                    },
                  }
                };
                V6::AllContent(e6)
              }
              n => {
                debug_assert_eq!(n, 1, "invalid enum discriminant");
                let e6 = {
                  let len5 = arg2 as usize;
                  let bytes5 = Vec::from_raw_parts(arg1 as *mut _, len5, len5);
                  
                  super::super::super::super::demo::vowels::types::Outrecord{
                    value: wit_bindgen::rt::string_lift(bytes5),
                  }
                };
                V6::Phrase(e6)
              }
            };
            let result7 = <_GuestImpl as Guest>::render(v6);
            let ptr8 = _RET_AREA.0.as_mut_ptr() as i32;
            match result7 {
              Ok(e) => { {
                *((ptr8 + 0) as *mut u8) = (0i32) as u8;
                let vec9 = (e.into_bytes()).into_boxed_slice();
                let ptr9 = vec9.as_ptr() as i32;
                let len9 = vec9.len() as i32;
                ::core::mem::forget(vec9);
                *((ptr8 + 8) as *mut i32) = len9;
                *((ptr8 + 4) as *mut i32) = ptr9;
              } },
              Err(e) => { {
                *((ptr8 + 0) as *mut u8) = (1i32) as u8;
                let vec10 = (e.into_bytes()).into_boxed_slice();
                let ptr10 = vec10.as_ptr() as i32;
                let len10 = vec10.len() as i32;
                ::core::mem::forget(vec10);
                *((ptr8 + 8) as *mut i32) = len10;
                *((ptr8 + 4) as *mut i32) = ptr10;
              } },
            };ptr8
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_demo:vowels/wurbo-out#render"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_render(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "demo:vowels/wurbo-out#activate"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_activate(arg0: i32,arg1: i32,arg2: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::activate(match arg0 {
              0 => None,
              1 => {
                let e = {
                  let base3 = arg1;
                  let len3 = arg2;
                  let mut result3 = Vec::with_capacity(len3 as usize);
                  for i in 0..len3 {
                    let base = base3 + i * 8;
                    let e3 = {
                      let l0 = *((base + 0) as *const i32);
                      let l1 = *((base + 4) as *const i32);
                      let len2 = l1 as usize;
                      let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                      
                      wit_bindgen::rt::string_lift(bytes2)
                    };
                    result3.push(e3);
                  }
                  wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
                  
                  result3
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            });
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          /// renders the initial Web component with the given data
          fn render(ctx: Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
          /// activate listening
          fn activate(selectors: Option<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>>,);
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:main"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2425] = [3, 0, 4, 109, 97, 105, 110, 0, 97, 115, 109, 13, 0, 1, 0, 7, 129, 2, 1, 65, 2, 1, 66, 16, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 4, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 111, 117, 116, 114, 101, 99, 111, 114, 100, 3, 0, 6, 1, 107, 115, 1, 114, 3, 5, 118, 97, 108, 117, 101, 115, 2, 105, 100, 8, 8, 116, 101, 109, 112, 108, 97, 116, 101, 8, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 9, 1, 107, 10, 1, 114, 3, 4, 112, 97, 103, 101, 3, 5, 105, 110, 112, 117, 116, 5, 6, 111, 117, 116, 112, 117, 116, 11, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 12, 1, 113, 2, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 13, 0, 6, 112, 104, 114, 97, 115, 101, 1, 7, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 4, 1, 17, 100, 101, 109, 111, 58, 118, 111, 119, 101, 108, 115, 47, 116, 121, 112, 101, 115, 5, 0, 11, 11, 1, 0, 5, 116, 121, 112, 101, 115, 3, 0, 0, 7, 236, 2, 1, 65, 5, 1, 66, 16, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 4, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 111, 117, 116, 114, 101, 99, 111, 114, 100, 3, 0, 6, 1, 107, 115, 1, 114, 3, 5, 118, 97, 108, 117, 101, 115, 2, 105, 100, 8, 8, 116, 101, 109, 112, 108, 97, 116, 101, 8, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 9, 1, 107, 10, 1, 114, 3, 4, 112, 97, 103, 101, 3, 5, 105, 110, 112, 117, 116, 5, 6, 111, 117, 116, 112, 117, 116, 11, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 12, 1, 113, 2, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 13, 0, 6, 112, 104, 114, 97, 115, 101, 1, 7, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 17, 100, 101, 109, 111, 58, 118, 111, 119, 101, 108, 115, 47, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 4, 2, 3, 2, 1, 1, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 4, 1, 20, 100, 101, 109, 111, 58, 118, 111, 119, 101, 108, 115, 47, 119, 117, 114, 98, 111, 45, 105, 110, 5, 2, 11, 14, 1, 0, 8, 119, 117, 114, 98, 111, 45, 105, 110, 3, 2, 0, 7, 250, 2, 1, 65, 5, 1, 66, 16, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 4, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 111, 117, 116, 114, 101, 99, 111, 114, 100, 3, 0, 6, 1, 107, 115, 1, 114, 3, 5, 118, 97, 108, 117, 101, 115, 2, 105, 100, 8, 8, 116, 101, 109, 112, 108, 97, 116, 101, 8, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 9, 1, 107, 10, 1, 114, 3, 4, 112, 97, 103, 101, 3, 5, 105, 110, 112, 117, 116, 5, 6, 111, 117, 116, 112, 117, 116, 11, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 12, 1, 113, 2, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 13, 0, 6, 112, 104, 114, 97, 115, 101, 1, 7, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 17, 100, 101, 109, 111, 58, 118, 111, 119, 101, 108, 115, 47, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 4, 1, 21, 100, 101, 109, 111, 58, 118, 111, 119, 101, 108, 115, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 5, 2, 11, 15, 1, 0, 9, 119, 117, 114, 98, 111, 45, 111, 117, 116, 3, 4, 0, 7, 253, 3, 1, 65, 2, 1, 65, 8, 1, 66, 16, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 114, 1, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 4, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 111, 117, 116, 114, 101, 99, 111, 114, 100, 3, 0, 6, 1, 107, 115, 1, 114, 3, 5, 118, 97, 108, 117, 101, 115, 2, 105, 100, 8, 8, 116, 101, 109, 112, 108, 97, 116, 101, 8, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 9, 1, 107, 10, 1, 114, 3, 4, 112, 97, 103, 101, 3, 5, 105, 110, 112, 117, 116, 5, 6, 111, 117, 116, 112, 117, 116, 11, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 12, 1, 113, 2, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 13, 0, 6, 112, 104, 114, 97, 115, 101, 1, 7, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 17, 100, 101, 109, 111, 58, 118, 111, 119, 101, 108, 115, 47, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 4, 2, 3, 2, 1, 1, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 3, 1, 20, 100, 101, 109, 111, 58, 118, 111, 119, 101, 108, 115, 47, 119, 117, 114, 98, 111, 45, 105, 110, 5, 2, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 3, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 4, 1, 21, 100, 101, 109, 111, 58, 118, 111, 119, 101, 108, 115, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 5, 4, 4, 1, 16, 100, 101, 109, 111, 58, 118, 111, 119, 101, 108, 115, 47, 109, 97, 105, 110, 4, 0, 11, 10, 1, 0, 4, 109, 97, 105, 110, 3, 6, 0, 0, 245, 5, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 119, 111, 114, 108, 100, 115, 34, 58, 123, 34, 109, 97, 105, 110, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 101, 120, 97, 109, 112, 108, 101, 32, 119, 111, 114, 108, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 116, 111, 32, 116, 97, 114, 103, 101, 116, 46, 34, 125, 125, 44, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 68, 101, 116, 97, 105, 108, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 105, 110, 32, 111, 114, 100, 101, 114, 32, 116, 111, 32, 97, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 97, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 125, 44, 34, 112, 97, 103, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 120, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 109, 105, 110, 105, 106, 105, 110, 106, 97, 32, 114, 101, 110, 100, 101, 114, 105, 110, 103, 34, 125, 44, 34, 111, 117, 116, 112, 117, 116, 34, 58, 123, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 105, 100, 34, 58, 34, 111, 112, 116, 105, 111, 110, 97, 108, 32, 105, 100, 32, 115, 116, 114, 105, 110, 103, 58, 32, 78, 111, 110, 101, 32, 105, 115, 32, 105, 110, 116, 105, 97, 108, 32, 114, 101, 110, 100, 101, 114, 44, 32, 83, 111, 109, 101, 32, 102, 111, 114, 32, 117, 112, 100, 97, 116, 101, 32, 118, 97, 108, 117, 101, 34, 125, 125, 44, 34, 99, 111, 110, 116, 101, 110, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 79, 110, 116, 101, 110, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 101, 110, 116, 105, 114, 101, 32, 112, 97, 103, 101, 34, 125, 44, 34, 99, 111, 110, 116, 101, 120, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 120, 116, 32, 118, 97, 114, 105, 97, 110, 116, 115, 34, 125, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 105, 110, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32, 99, 111, 114, 101, 32, 123, 92, 110, 92, 110, 47, 47, 32, 67, 111, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 97, 108, 105, 116, 121, 92, 110, 99, 97, 108, 99, 117, 108, 97, 116, 101, 58, 32, 102, 117, 110, 99, 40, 105, 110, 112, 117, 116, 58, 32, 115, 116, 114, 105, 110, 103, 41, 32, 45, 62, 32, 115, 116, 114, 105, 110, 103, 59, 92, 110, 125, 34, 44, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 34, 58, 34, 65, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 111, 117, 116, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 114, 101, 110, 100, 101, 114, 34, 58, 34, 114, 101, 110, 100, 101, 114, 115, 32, 116, 104, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 87, 101, 98, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 100, 97, 116, 97, 34, 44, 34, 97, 99, 116, 105, 118, 97, 116, 101, 34, 58, 34, 97, 99, 116, 105, 118, 97, 116, 101, 32, 108, 105, 115, 116, 101, 110, 105, 110, 103, 34, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
