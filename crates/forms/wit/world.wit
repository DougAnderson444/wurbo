package demo:forms;

interface types {

  // Details required in order to add an event listener to an element
  record listen-details {
    selector: string,
    ty: string,
    outputid: string,
    template: string
  }

  // Context for the minijinja rendering
  record page {
    title: string
  }

  record input {
    placeholder: string
  }

  record output {
    value: string,
    // optional id string: None is intial render, Some for update value
    id: option<string>,
    // tell the render function what the name of the template is. Defaults to "output.html"
    template: option<string>
  }

  // COntent for the entire page
  record content {
    page: page,
    input: input,
    output: output
  }

  // Context variants
  variant context {
    content(content),
    output(output)
  }

}

// interface core {
//
//   // Core functionality
//   calculate: func(input: string) -> string;
// }

interface wurbo-in {

  use types.{listen-details};

  // Add an event listener to the given element
  addeventlistener: func(details: listen-details);

}

interface wurbo-out {

  use types.{context};

  // renders the initial Web component with the given data
  render: func(ctx: context) -> result<string, string>;

  // activate listening 
  activate: func();
}

/// An example world for the component to target.
world main {
  import wurbo-in;
  export wurbo-out;
}
